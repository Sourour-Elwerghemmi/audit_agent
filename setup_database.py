#!/usr/bin/env python3
"""
Script d'initialisation de la base de donn√©es
"""

import os
import sys
import logging
from pathlib import Path

# Ajouter le r√©pertoire parent au path pour importer les modules
sys.path.append(str(Path(__file__).parent))

from dotenv import load_dotenv
from sqlalchemy import create_engine, text
from sqlalchemy.exc import ProgrammingError
import pymysql

from app.database import MYSQL_USER, MYSQL_PASSWORD, MYSQL_HOST, MYSQL_PORT, MYSQL_DB
from app.models_db import Base

# Configuration des logs
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def create_database_if_not_exists():
    """Cr√©e la base de donn√©es si elle n'existe pas"""
    try:
        # Connexion sans sp√©cifier la base de donn√©es
        connection_url = f"mysql+pymysql://{MYSQL_USER}:{MYSQL_PASSWORD}@{MYSQL_HOST}:{MYSQL_PORT}/"
        engine = create_engine(connection_url)
        
        with engine.connect() as conn:
            # V√©rifier si la base de donn√©es existe
            result = conn.execute(text(f"SHOW DATABASES LIKE '{MYSQL_DB}'"))
            if not result.fetchone():
                # Cr√©er la base de donn√©es
                conn.execute(text(f"CREATE DATABASE {MYSQL_DB} CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci"))
                logger.info(f"‚úÖ Base de donn√©es '{MYSQL_DB}' cr√©√©e avec succ√®s")
            else:
                logger.info(f"‚ÑπÔ∏è Base de donn√©es '{MYSQL_DB}' existe d√©j√†")
                
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la cr√©ation de la base de donn√©es : {e}")
        raise

def create_tables():
    """Cr√©e les tables de l'application"""
    try:
        # Maintenant se connecter √† la base de donn√©es sp√©cifique
        from app.database import engine
        Base.metadata.create_all(bind=engine)
        logger.info("‚úÖ Tables cr√©√©es avec succ√®s")
        
        # V√©rifier que les tables ont √©t√© cr√©√©es
        with engine.connect() as conn:
            result = conn.execute(text("SHOW TABLES"))
            tables = [row[0] for row in result]
            logger.info(f"üìã Tables cr√©√©es : {tables}")
            
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la cr√©ation des tables : {e}")
        raise

def test_connection():
    """Test de la connexion √† la base de donn√©es"""
    try:
        from app.database import engine
        with engine.connect() as conn:
            result = conn.execute(text("SELECT 1"))
            if result.fetchone():
                logger.info("‚úÖ Connexion √† la base de donn√©es r√©ussie")
                return True
    except Exception as e:
        logger.error(f"‚ùå Erreur de connexion √† la base de donn√©es : {e}")
        return False

def main():
    """Fonction principale d'initialisation"""
    logger.info("üîß Initialisation de la base de donn√©es...")
    
    # Charger les variables d'environnement
    load_dotenv()
    
    # V√©rifier que les variables d'environnement sont d√©finies
    required_vars = ['MYSQL_USER', 'MYSQL_PASSWORD', 'MYSQL_HOST', 'MYSQL_PORT', 'MYSQL_DB']
    missing_vars = [var for var in required_vars if not os.getenv(var)]
    
    if missing_vars:
        logger.error(f"‚ùå Variables d'environnement manquantes : {missing_vars}")
        logger.error("üí° V√©rifiez votre fichier .env")
        sys.exit(1)
    
    try:
        # √âtape 1 : Cr√©er la base de donn√©es
        logger.info("üìù √âtape 1 : Cr√©ation de la base de donn√©es...")
        create_database_if_not_exists()
        
        # √âtape 2 : Cr√©er les tables
        logger.info("üìù √âtape 2 : Cr√©ation des tables...")
        create_tables()
        
        # √âtape 3 : Test de connexion
        logger.info("üìù √âtape 3 : Test de connexion...")
        if test_connection():
            logger.info("üéâ Initialisation termin√©e avec succ√®s !")
            logger.info("üí° Vous pouvez maintenant d√©marrer l'application avec : uvicorn main:app --reload")
        else:
            logger.error("‚ùå √âchec du test de connexion")
            sys.exit(1)
            
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de l'initialisation : {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
    